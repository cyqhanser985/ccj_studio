---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../layouts/Layout.astro';

// 定义笔记条目类型
type NotesEntry = CollectionEntry<'notes'>;

// 获取所有非草稿的笔记
const notesEntries = await getCollection('notes', ({ data }: NotesEntry) => !data.draft);

// 按日期排序
const sortedEntries = notesEntries
  .sort((a: NotesEntry, b: NotesEntry) => 
    new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
  );

// 获取所有独特的分类和标签
const categories = [...new Set(notesEntries
  .filter((entry: NotesEntry) => entry.data.category)
  .map((entry: NotesEntry) => entry.data.category))] as string[];

const allTags = notesEntries.flatMap((entry: NotesEntry) => entry.data.tags || []);
const uniqueTags = [...new Set(allTags)].slice(0, 20); // 只显示前20个标签

// 格式化日期的函数
function formatDate(date: Date): string {
  return new Date(date).toLocaleDateString('zh-CN', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}
---

<Layout title="学习笔记">
  <div class="max-w-6xl mx-auto">
    <header class="mb-10">
      <h1 class="text-3xl md:text-4xl font-bold mb-4">学习笔记</h1>
      <p class="text-gray-600">记录学习过程中的关键概念和知识点</p>
    </header>

    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <!-- 笔记列表 -->
      <div class="lg:col-span-3">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {sortedEntries.map((note: NotesEntry) => (
            <article class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm hover:shadow-md transition-shadow">
              <h2 class="text-xl font-bold mb-3">
                <a href={`/notes/${note.slug}`} class="text-blue-700 dark:text-blue-400 hover:underline">
                  {note.data.title}
                </a>
              </h2>
              {note.data.description && (
                <p class="text-gray-600 dark:text-gray-300 mb-3 line-clamp-2">{note.data.description}</p>
              )}
              <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-3">
                <time datetime={note.data.date.toISOString()}>
                  {formatDate(note.data.date)}
                </time>
                {note.data.category && (
                  <>
                    <span class="mx-2">|</span>
                    <a href={`/category/${note.data.category.toLowerCase()}`} class="text-blue-600 dark:text-blue-400 hover:underline">
                      {note.data.category}
                    </a>
                  </>
                )}
              </div>
              {note.data.tags && note.data.tags.length > 0 && (
                <div class="flex flex-wrap gap-2">
                  {note.data.tags.map((tag: string) => (
                    <a 
                      href={`/tag/${tag.toLowerCase()}`}
                      class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs px-2 py-1 rounded hover:bg-blue-200 dark:hover:bg-blue-800"
                    >
                      {tag}
                    </a>
                  ))}
                </div>
              )}
            </article>
          ))}
        </div>
      </div>
      
      <!-- 侧边栏 -->
      <div class="lg:col-span-1">
        <!-- 分类列表 -->
        <section class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm mb-8">
          <h2 class="text-xl font-bold mb-4 pb-2 border-b dark:border-gray-700">分类</h2>
          <ul class="space-y-2">
            {categories.map((category) => {
              if (category) {
                return (
                  <li>
                    <a 
                      href={`/category/${category.toLowerCase()}`} 
                      class="flex justify-between items-center text-blue-600 dark:text-blue-400 hover:underline"
                    >
                      <span>{category}</span>
                      <span class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs px-2 py-1 rounded">
                        {notesEntries.filter((entry: NotesEntry) => entry.data.category === category).length}
                      </span>
                    </a>
                  </li>
                );
              }
              return null;
            })}
          </ul>
        </section>
        
        <!-- 标签云 -->
        <section class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm">
          <h2 class="text-xl font-bold mb-4 pb-2 border-b dark:border-gray-700">标签云</h2>
          <div class="flex flex-wrap gap-2">
            {uniqueTags.map((tag) => (
              <a 
                href={`/tag/${String(tag).toLowerCase()}`}
                class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm px-3 py-1 rounded hover:bg-blue-200 dark:hover:bg-blue-800"
              >
                {tag}
              </a>
            ))}
          </div>
        </section>
      </div>
    </div>
  </div>
</Layout> 