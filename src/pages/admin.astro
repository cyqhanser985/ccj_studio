---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// 默认管理员密码
const ADMIN_PASSWORD = "Cyq20060804";

// 获取所有文章（用于统计）
const blogEntries = await getCollection('blog');
const notesEntries = await getCollection('notes');
const vocabularyEntries = await getCollection('vocabulary'); // Added
---

<Layout title="开发者模式">
  <div class="max-w-4xl mx-auto py-8 px-4">
    <h1 class="text-3xl font-bold mb-6 text-gray-900 dark:text-white">开发者模式</h1>
    
    <!-- 登录面板 -->
    <div id="login-panel" class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 mb-8">
      <h2 class="text-xl font-bold mb-4 text-gray-900 dark:text-white">请输入管理员密码</h2>
      <div class="mb-6">
        <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">密码</label>
        <input type="password" id="password" name="password" class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500">
      </div>
      <div class="flex justify-end">
        <button id="login-btn" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
          验证
        </button>
      </div>
    </div>
    
    <!-- 管理面板 (初始隐藏) -->
    <div id="admin-panel" class="hidden">
      <!-- 站点统计 -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 mb-8">
        <h2 class="text-xl font-bold mb-4 text-gray-900 dark:text-white">站点统计</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="bg-blue-50 dark:bg-blue-900 p-4 rounded-lg">
            <div class="text-3xl font-bold text-blue-600 dark:text-blue-300">{blogEntries.length}</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">博客文章</div>
          </div>
          <div class="bg-green-50 dark:bg-green-900 p-4 rounded-lg">
            <div class="text-3xl font-bold text-green-600 dark:text-green-300">{notesEntries.length}</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">学习笔记</div>
          </div>
          <div class="bg-purple-50 dark:bg-purple-900 p-4 rounded-lg">
            <div class="text-3xl font-bold text-purple-600 dark:text-purple-300" id="vocabulary-count">{vocabularyEntries.length}</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">单词数量</div>
          </div>
        </div>
      </div>
      
      <!-- 博客主人信息编辑 -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 mb-8">
        <h2 class="text-xl font-bold mb-4 text-gray-900 dark:text-white">博客主人信息</h2>
        <form id="author-form" class="space-y-6">
          <div>
            <label for="author-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">姓名</label>
            <input type="text" id="author-name" name="name" class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>
          
          <div>
            <label for="author-bio" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">个人简介</label>
            <textarea id="author-bio" name="bio" rows="3" class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
          </div>
          
          <div>
            <label for="author-email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">邮箱</label>
            <input type="email" id="author-email" name="email" class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>
          
          <div>
            <label for="social-github" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">GitHub链接</label>
            <input type="url" id="social-github" name="github" class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>
          
          <div>
            <label for="social-twitter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Twitter链接</label>
            <input type="url" id="social-twitter" name="twitter" class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>
          
          <div class="flex justify-end">
            <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
              保存信息
            </button>
          </div>
        </form>
      </div>
      
      <!-- 添加单词 -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 mb-8">
        <h2 class="text-xl font-bold mb-4 text-gray-900 dark:text-white">添加新单词</h2>
        <form id="add-vocabulary-form" class="space-y-6">
          <div>
            <label for="vocab-word" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">单词</label>
            <input type="text" id="vocab-word" name="word" required class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500" placeholder="例如: example">
          </div>
          <div>
            <label for="vocab-markdown" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Markdown 内容 (单词释义、例句等)</label>
            <textarea id="vocab-markdown" name="markdownContent" rows="5" required class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500" placeholder="输入 Markdown 格式的单词解释和用法..."></textarea>
          </div>
          <div class="flex items-center">
            <input type="checkbox" id="vocab-draft" name="draft" class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500">
            <label for="vocab-draft" class="ml-2 block text-sm text-gray-900 dark:text-gray-300">设为草稿</label>
          </div>
          <div class="flex justify-end">
            <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
              添加单词
            </button>
          </div>
        </form>
      </div>

      <!-- 头像上传 -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6">
        <h2 class="text-xl font-bold mb-4 text-gray-900 dark:text-white">头像设置</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div class="md:col-span-1">
            <div class="aspect-square overflow-hidden rounded-full border-4 border-gray-200 dark:border-gray-700">
              <img id="avatar-preview" src="/avatar.jpg" alt="头像预览" class="w-full h-full object-cover" onerror="this.src='/default-avatar.jpg'">
            </div>
          </div>
          
          <div class="md:col-span-2">
            <form id="avatar-form" class="space-y-6">
              <div>
                <label for="avatar-upload" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">上传新头像</label>
                <input type="file" id="avatar-upload" name="avatar" accept="image/*" class="w-full text-sm text-gray-500 dark:text-gray-400
                  file:mr-4 file:py-2 file:px-4
                  file:rounded-md file:border-0
                  file:text-sm file:font-semibold
                  file:bg-blue-50 file:text-blue-700
                  dark:file:bg-blue-900 dark:file:text-blue-200
                  hover:file:bg-blue-100
                  dark:hover:file:bg-blue-800
                ">
                <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">推荐使用正方形图片，JPG或PNG格式</p>
              </div>
              
              <div class="flex justify-end">
                <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                  更新头像
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // 定义作者信息类型
  interface AuthorInfo {
    name: string;
    bio: string;
    email: string;
    github?: string;
    twitter?: string;
  }
  
  // 存储键
  const AUTHOR_KEY = 'author_info';
  const VOCAB_KEY = 'vocabulary_words';
  
  // 表单元素
  const loginPanel = document.getElementById('login-panel') as HTMLDivElement;
  const adminPanel = document.getElementById('admin-panel') as HTMLDivElement;
  const loginBtn = document.getElementById('login-btn') as HTMLButtonElement;
  const passwordInput = document.getElementById('password') as HTMLInputElement;
  const authorForm = document.getElementById('author-form') as HTMLFormElement;
  const avatarForm = document.getElementById('avatar-form') as HTMLFormElement;
  const avatarUpload = document.getElementById('avatar-upload') as HTMLInputElement;
  const avatarPreview = document.getElementById('avatar-preview') as HTMLImageElement;
  const vocabularyCountEl = document.getElementById('vocabulary-count') as HTMLDivElement; // Renamed
  const addVocabularyForm = document.getElementById('add-vocabulary-form') as HTMLFormElement; // Added
  
  // 检查是否已登录
  let isLoggedIn = localStorage.getItem('admin_logged_in') === 'true';
  
  // 初始化页面
  function init() {
    if (isLoggedIn) {
      showAdminPanel();
    }
    
    setupEventListeners();
    loadAuthorInfo();
    loadAndDisplayVocabularyCount(); // Updated function name
  }
  
  // 验证密码
  function verifyPassword() {
    const password = passwordInput.value;
    
    if (password === "Cyq20060804") {
      isLoggedIn = true;
      localStorage.setItem('admin_logged_in', 'true');
      showAdminPanel();
    } else {
      alert("密码错误，请重试！");
      passwordInput.value = '';
    }
  }
  
  // 显示管理面板
  function showAdminPanel() {
    loginPanel.classList.add('hidden');
    adminPanel.classList.remove('hidden');
  }
  
  // 加载作者信息
  function loadAuthorInfo() {
    try {
      const storedInfo = localStorage.getItem(AUTHOR_KEY);
      if (storedInfo) {
        const authorInfo: AuthorInfo = JSON.parse(storedInfo);
        
        // 填充表单
        (document.getElementById('author-name') as HTMLInputElement).value = authorInfo.name || '';
        (document.getElementById('author-bio') as HTMLTextAreaElement).value = authorInfo.bio || '';
        (document.getElementById('author-email') as HTMLInputElement).value = authorInfo.email || '';
        (document.getElementById('social-github') as HTMLInputElement).value = authorInfo.github || '';
        (document.getElementById('social-twitter') as HTMLInputElement).value = authorInfo.twitter || '';
      }
    } catch (error) {
      console.error('加载作者信息失败:', error);
    }
  }
  
  // 保存作者信息
  function saveAuthorInfo(e: Event) {
    e.preventDefault();
    
    try {
      const formData = new FormData(authorForm);
      const authorInfo: AuthorInfo = {
        name: formData.get('name') as string || '',
        bio: formData.get('bio') as string || '',
        email: formData.get('email') as string || '',
        github: formData.get('github') as string || '',
        twitter: formData.get('twitter') as string || ''
      };
      
      // 保存到本地存储
      localStorage.setItem(AUTHOR_KEY, JSON.stringify(authorInfo));
      
      // 保存到JSON文件
      saveAuthorToFile(authorInfo);
      
      alert('作者信息保存成功！');
    } catch (error) {
      console.error('保存作者信息失败:', error);
      alert(`保存作者信息失败: ${error instanceof Error ? error.message : '未知错误'}`);
    }
  }
  
  // 保存作者信息到文件
  async function saveAuthorToFile(authorInfo: AuthorInfo) {
    try {
      const response = await fetch('/api/save-author', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(authorInfo),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
    } catch (error) {
      console.error('保存作者信息到文件失败:', error);
      throw error;
    }
  }
  
  // 处理头像上传
  function handleAvatarUpload(e: Event) {
    e.preventDefault();
    
    if (!avatarUpload.files || avatarUpload.files.length === 0) {
      alert('请选择要上传的图片');
      return;
    }
    
    const file = avatarUpload.files[0];
    
    // 验证文件类型
    if (!file.type.match('image.*')) {
      alert('请选择图片文件');
      return;
    }
    
    // 显示预览
    const reader = new FileReader();
    reader.onload = function(e) {
      if (e.target && e.target.result) {
        avatarPreview.src = e.target.result as string;
      }
    };
    reader.readAsDataURL(file);
    
    // 上传文件
    uploadAvatar(file);
  }
  
  // 上传头像到服务器
  async function uploadAvatar(file: File) {
    try {
      const formData = new FormData();
      formData.append('avatar', file);
      
      const response = await fetch('/api/upload-avatar', {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      
      const data = await response.json();
      alert('头像上传成功！');
      
      // 刷新缓存，确保显示新头像
      avatarPreview.src = `${data.url}?t=${new Date().getTime()}`;
    } catch (error) {
      console.error('上传头像失败:', error);
      alert(`上传头像失败: ${error instanceof Error ? error.message : '未知错误'}`);
    }
  }
  
  // 加载并显示单词数量 (Initial count is rendered by Astro)
  function loadAndDisplayVocabularyCount() {
    // The initial count is set by Astro in the HTML.
    // This function is kept for structure, could be used for future dynamic updates.
    // console.log('Vocabulary count display initialized by Astro.');
  }

  // 处理添加单词表单提交
  async function handleAddVocabularySubmit(event: Event) {
    event.preventDefault();
    if (!addVocabularyForm) return; // Type guard
    const formData = new FormData(addVocabularyForm);
    const word = formData.get('word') as string;
    const markdownContent = formData.get('markdownContent') as string;
    const draft = (formData.get('draft') === 'on');

    if (!word.trim() || !markdownContent.trim()) {
      alert('单词和 Markdown 内容不能为空！');
      return;
    }

    const currentDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD

    try {
      const response = await fetch('/api/create-vocabulary', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          word,
          markdownContent,
          date: currentDate,
          draft,
        }),
      });

      const result = await response.json();

      if (response.ok && result.success) {
        alert('单词添加成功！');
        addVocabularyForm.reset();
        if (vocabularyCountEl) { // Use the renamed variable
          const currentCount = parseInt(vocabularyCountEl.textContent || '0');
          vocabularyCountEl.textContent = (currentCount + 1).toString();
        }
      } else {
        alert(`添加失败: ${result.message || '未知错误'}`);
      }
    } catch (error) {
      console.error('添加单词时出错:', error);
      alert('添加单词时发生网络错误。');
    }
  }
  
  // 设置事件监听器
  function setupEventListeners() {
    // 登录
    if (loginBtn) {
      loginBtn.addEventListener('click', verifyPassword);
    }
    
    if (passwordInput) {
      passwordInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          verifyPassword();
        }
      });
    }
    
    // 作者信息表单
    if (authorForm) {
      authorForm.addEventListener('submit', saveAuthorInfo);
    }
    
    // 头像上传
    if (avatarForm) {
      avatarForm.addEventListener('submit', handleAvatarUpload);
    }
    
    // 添加单词表单
    if (addVocabularyForm) { // Added
      addVocabularyForm.addEventListener('submit', handleAddVocabularySubmit); // Added
    }
  }
  
  // 初始化页面
  document.addEventListener('DOMContentLoaded', init);
</script>