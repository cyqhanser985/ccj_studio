---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// 获取所有文章（用于统计）
const blogEntries = await getCollection('blog');
const notesEntries = await getCollection('notes');
---

<Layout title="开发者模式">
  <div class="max-w-4xl mx-auto py-8 px-4">
    <h1 class="text-3xl font-bold mb-6 text-gray-900 dark:text-white">开发者模式</h1>
    
    <!-- 登录面板 -->
    <div id="login-panel" class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 mb-8">
      <h2 class="text-xl font-bold mb-4 text-gray-900 dark:text-white">请输入管理员密码</h2>
      <div class="mb-6">
        <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">密码</label>
        <input type="password" id="password" name="password" class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500">
      </div>
      <div class="flex justify-end">
        <button id="login-btn" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
          验证
        </button>
      </div>
    </div>
    
    <!-- 管理面板 (初始隐藏) -->
    <div id="admin-panel" class="hidden">
      <!-- 站点统计 -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 mb-8">
        <h2 class="text-xl font-bold mb-4 text-gray-900 dark:text-white">站点统计</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="bg-blue-50 dark:bg-blue-900 p-4 rounded-lg">
            <div class="text-3xl font-bold text-blue-600 dark:text-blue-300">{blogEntries.length}</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">博客文章</div>
          </div>
          <div class="bg-green-50 dark:bg-green-900 p-4 rounded-lg">
            <div class="text-3xl font-bold text-green-600 dark:text-green-300">{notesEntries.length}</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">学习笔记</div>
          </div>
        </div>
      </div>
      
      <!-- 博客主人信息编辑 -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 mb-8">
        <h2 class="text-xl font-bold mb-4 text-gray-900 dark:text-white">博客主人信息</h2>
        <form id="author-form" class="space-y-6">
          <div>
            <label for="author-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">姓名</label>
            <input type="text" id="author-name" name="name" class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>
          
          <div>
            <label for="author-bio" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">个人简介</label>
            <textarea id="author-bio" name="bio" rows="3" class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
          </div>
          
          <div>
            <label for="author-email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">邮箱</label>
            <input type="email" id="author-email" name="email" class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>
          
          <div>
            <label for="social-github" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">GitHub链接</label>
            <input type="url" id="social-github" name="github" class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>
          
          <div>
            <label for="social-twitter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Twitter链接</label>
            <input type="url" id="social-twitter" name="twitter" class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>
          
          <div class="flex justify-end">
            <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
              保存信息
            </button>
          </div>
        </form>
      </div>
      
      <!-- 头像上传 -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6">
        <h2 class="text-xl font-bold mb-4 text-gray-900 dark:text-white">头像设置</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div class="md:col-span-1">
            <div class="aspect-square overflow-hidden rounded-full border-4 border-gray-200 dark:border-gray-700">
              <img id="avatar-preview" src="/avatar.jpg" alt="头像预览" class="w-full h-full object-cover" onerror="this.src='/default-avatar.jpg'">
            </div>
          </div>
          
          <div class="md:col-span-2">
            <form id="avatar-form" class="space-y-6">
              <div>
                <label for="avatar-upload" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">上传新头像</label>
                <input type="file" id="avatar-upload" name="avatar" accept="image/*" class="w-full text-sm text-gray-500 dark:text-gray-400
                  file:mr-4 file:py-2 file:px-4
                  file:rounded-md file:border-0
                  file:text-sm file:font-semibold
                  file:bg-blue-50 file:text-blue-700
                  dark:file:bg-blue-900 dark:file:text-blue-200
                  hover:file:bg-blue-100
                  dark:hover:file:bg-blue-800
                ">
                <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">推荐使用正方形图片，JPG或PNG格式</p>
              </div>
              
              <div class="flex justify-end">
                <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                  更新头像
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script defer>
  // 定义作者信息类型
  // interface AuthorInfo {
  //   name: string;
  //   bio: string;
  //   email: string;
  //   github?: string;
  //   twitter?: string;
  // }
  
  // 存储键
  const AUTHOR_KEY = 'author_info';
  const ADMIN_PASSWORD = 'Cyq20060804'; // 实际使用中应该使用更安全的方式存储
  
  // 表单元素
  const loginPanel = document.getElementById('login-panel');
  const adminPanel = document.getElementById('admin-panel');
  const loginBtn = document.getElementById('login-btn');
  const passwordInput = document.getElementById('password');
  const authorForm = document.getElementById('author-form');
  const avatarForm = document.getElementById('avatar-form');
  const avatarUpload = document.getElementById('avatar-upload');
  const avatarPreview = document.getElementById('avatar-preview');
  
  // 检查是否已登录
  let isLoggedIn = localStorage.getItem('admin_logged_in') === 'true';
  
  // 初始化
  function init() {
    // 根据登录状态显示不同面板
    if (isLoggedIn) {
      showAdminPanel();
    } else {
      showLoginPanel();
    }
    
    // 添加事件监听器
    if (loginBtn) {
      loginBtn.addEventListener('click', handleLogin);
    }
    
    if (authorForm) {
      authorForm.addEventListener('submit', saveAuthorInfo);
    }
    
    if (avatarForm) {
      avatarForm.addEventListener('submit', handleAvatarUpload);
    }
    
    if (avatarUpload) {
      avatarUpload.addEventListener('change', previewAvatar);
    }
    
    // 载入作者信息
    loadAuthorInfo();
  }
  
  // 显示登录面板
  function showLoginPanel() {
    if (loginPanel && adminPanel) {
      loginPanel.classList.remove('hidden');
      adminPanel.classList.add('hidden');
    }
  }
  
  // 显示管理面板
  function showAdminPanel() {
    if (loginPanel && adminPanel) {
      loginPanel.classList.add('hidden');
      adminPanel.classList.remove('hidden');
    }
  }
  
  // 处理登录
  function handleLogin(e) {
    e.preventDefault();
    
    if (passwordInput && passwordInput.value === ADMIN_PASSWORD) {
      isLoggedIn = true;
      localStorage.setItem('admin_logged_in', 'true');
      showAdminPanel();
    } else {
      alert('密码错误，请重试！');
      if (passwordInput) passwordInput.value = '';
    }
  }
  
  // 加载作者信息
  function loadAuthorInfo() {
    try {
      const storedInfo = localStorage.getItem(AUTHOR_KEY);
      if (storedInfo) {
        const authorInfo = JSON.parse(storedInfo);
        
        // 填充表单
        (document.getElementById('author-name')).value = authorInfo.name || '';
        (document.getElementById('author-bio')).value = authorInfo.bio || '';
        (document.getElementById('author-email')).value = authorInfo.email || '';
        (document.getElementById('social-github')).value = authorInfo.github || '';
        (document.getElementById('social-twitter')).value = authorInfo.twitter || '';
      }
    } catch (error) {
      console.error('加载作者信息失败:', error);
    }
  }
  
  // 保存作者信息
  function saveAuthorInfo(e) {
    e.preventDefault();
    
    try {
      const formData = new FormData(authorForm);
      const authorInfo = {
        name: formData.get('name') || '',
        bio: formData.get('bio') || '',
        email: formData.get('email') || '',
        github: formData.get('github') || '',
        twitter: formData.get('twitter') || ''
      };
      
      // 保存到本地存储
      localStorage.setItem(AUTHOR_KEY, JSON.stringify(authorInfo));
      
      // 同时保存到文件（如果可能）
      saveAuthorToFile(authorInfo)
        .then(() => {
          alert('作者信息已成功保存！');
        })
        .catch(error => {
          console.error('保存作者信息到文件失败:', error);
          alert('作者信息已保存到本地存储，但保存到文件失败，可能需要联系管理员。');
        });
      
    } catch (error) {
      console.error('保存作者信息失败:', error);
      alert('保存作者信息失败，请重试。');
    }
  }
  
  // 保存作者信息到文件
  async function saveAuthorToFile(authorInfo) {
    try {
      const response = await fetch('/api/save-author', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(authorInfo),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('保存作者信息到文件API调用失败:', error);
      throw error;
    }
  }
  
  // 处理头像上传
  function handleAvatarUpload(e) {
    e.preventDefault();
    
    if (!avatarUpload.files || avatarUpload.files.length === 0) {
      alert('请先选择一个图片文件');
      return;
    }
    
    const file = avatarUpload.files[0];
    if (!file.type.startsWith('image/')) {
      alert('请选择一个图片文件');
      return;
    }
    
    // 上传头像
    uploadAvatar(file)
      .then(() => {
        alert('头像上传成功！');
      })
      .catch(error => {
        console.error('上传头像失败:', error);
        alert('上传头像失败，请重试。');
      });
  }
  
  // 预览头像
  function previewAvatar() {
    if (!avatarUpload.files || avatarUpload.files.length === 0 || !avatarPreview) {
      return;
    }
    
    const file = avatarUpload.files[0];
    if (!file.type.startsWith('image/')) {
      return;
    }
    
    const reader = new FileReader();
    reader.onload = function(e) {
      if (e.target && e.target.result) {
        avatarPreview.src = e.target.result;
      }
    };
    reader.readAsDataURL(file);
  }
  
  // 上传头像到服务器
  async function uploadAvatar(file) {
    try {
      const formData = new FormData();
      formData.append('avatar', file);
      
      const response = await fetch('/api/upload-avatar', {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('上传头像API调用失败:', error);
      throw error;
    }
  }
  
  // 初始化页面
  document.addEventListener('DOMContentLoaded', init);
</script> 