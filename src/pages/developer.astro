---
import Layout from '../layouts/Layout.astro';
import { mainToolbarConfig } from '../config/toolbar.config';

const pageTitle: string = "开发者后台";

const VITE_DEV_PASSWORD_SERVER = import.meta.env.VITE_DEV_PASSWORD;
const SERVER_SIDE_DEV_PASSWORD = VITE_DEV_PASSWORD_SERVER || "Cyq20060804";

if (!VITE_DEV_PASSWORD_SERVER) {
  console.warn(
    "Security Concern: Developer password is not set in environment variables (.env file). " +
    "Using fallback password. Set VITE_DEV_PASSWORD in your .env file " +
    "(e.g., VITE_DEV_PASSWORD=your_secure_password_here)."
  );
}

// Serialize data for embedding into HTML
const devPasswordJsonString: string = JSON.stringify(SERVER_SIDE_DEV_PASSWORD);
const toolbarConfigJsonString: string = JSON.stringify(mainToolbarConfig);
---

<Layout title={pageTitle}>
  {/* Data container for passing server-side variables to client-side script */}
  <div
    id="developer-data-container"
    data-password={devPasswordJsonString}
    data-toolbar-config={toolbarConfigJsonString}
    style="display:none;"
  ></div>

  <div id="developer-login-panel" class="max-w-md mx-auto mt-12 p-6 bg-white dark:bg-gray-800 rounded-lg shadow-xl">
    <h2 class="text-2xl font-bold mb-6 text-center text-gray-900 dark:text-white">开发者模式</h2>
    <div class="mb-4">
      <label for="developer-password-input" class="block text-sm font-medium text-gray-700 dark:text-gray-300">请输入密码：</label>
      <input type="password" id="developer-password-input" class="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-gray-700 dark:text-white" />
    </div>
    <button id="developer-login-btn" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline transition-colors duration-150">
      进入开发者模式
    </button>    
    <p id="developer-error-msg" class="mt-3 text-red-500 text-sm text-center"></p>
    <div class="mt-6 p-4 bg-gray-100 dark:bg-gray-700 rounded-md">
      <h3 class="text-lg font-semibold mb-2 text-gray-800 dark:text-gray-200">快捷键提示</h3>
      <p class="text-sm text-gray-600 dark:text-gray-400"><kbd class="px-2 py-1.5 text-xs font-semibold text-gray-800 bg-gray-200 dark:bg-gray-900 dark:text-gray-200 border border-gray-300 dark:border-gray-600 rounded-lg">Ctrl</kbd> + <kbd class="px-2 py-1.5 text-xs font-semibold text-gray-800 bg-gray-200 dark:bg-gray-900 dark:text-gray-200 border border-gray-300 dark:border-gray-600 rounded-lg">F1</kbd>: 访问此开发者页面。</p>
    </div>
  </div>

  <div id="developer-main-content" class="hidden">
    <div id="developer-toolbar" class="fixed top-0 left-0 right-0 bg-gray-800 dark:bg-gray-900 text-white p-3 shadow-lg z-50 flex justify-between items-center">
      <div id="toolbar-left-buttons" class="flex items-center space-x-4">
        <span class="text-lg font-semibold">开发者工具</span>
      </div>
      <div id="toolbar-right-buttons" class="flex items-center space-x-4">
      </div>
    </div>

    <div id="developer-page-content" class="mt-20 p-6">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-white">欢迎来到开发者后台</h2>
      <p class="text-gray-700 dark:text-gray-300">请从上方工具栏选择一个操作。</p>
    </div>
  </div>

  <script>
    import type { ToolbarConfig, ToolbarButtonConfig, ActionKeyType } from '../config/toolbar.config';

    let currentToolbarConfig: ToolbarConfig = { leftButtons: [], rightButtons: [] };

    const dataContainer = document.getElementById('developer-data-container');
    let passed_dev_password = "";

    if (dataContainer) {
        passed_dev_password = JSON.parse(dataContainer.dataset.password || '""');
        currentToolbarConfig = JSON.parse(
            dataContainer.dataset.toolbarConfig || '{ "leftButtons": [], "rightButtons": [] }'
        ) as ToolbarConfig; // Assert type after parsing
    } else {
        console.error("Developer data container not found!");
    }

    const loginPanel = document.getElementById('developer-login-panel');
    const mainContent = document.getElementById('developer-main-content');
    const loginBtn = document.getElementById('developer-login-btn');
    const errorMsg = document.getElementById('developer-error-msg');

    const developerPageContent = document.getElementById('developer-page-content');
    const toolbarLeftButtonsContainer = document.getElementById('toolbar-left-buttons');
    const toolbarRightButtonsContainer = document.getElementById('toolbar-right-buttons');

    const toolbarActions: Record<ActionKeyType, () => void> = {
        loadCreateContentPage,
        loadAddWordPage,
        handleLogout
    };

    function renderToolbar() {
        if (!toolbarLeftButtonsContainer || !toolbarRightButtonsContainer || !currentToolbarConfig) return;

        toolbarLeftButtonsContainer.innerHTML = '<span class="text-lg font-semibold">开发者工具</span>';
        currentToolbarConfig.leftButtons.forEach(
          (buttonConfig: ToolbarButtonConfig) => { // Explicitly type here for clarity, though often inferred
            const button = createToolbarButton(buttonConfig);
            toolbarLeftButtonsContainer.appendChild(button);
        });

        toolbarRightButtonsContainer.innerHTML = '';
        currentToolbarConfig.rightButtons.forEach(
          (buttonConfig: ToolbarButtonConfig) => { // Explicitly type here
            const button = createToolbarButton(buttonConfig);
            toolbarRightButtonsContainer.appendChild(button);
        });
    }

    /**
     * 创建一个工具栏按钮。
     * @param config - 按钮配置对象。
     * @returns 创建的按钮元素。
     */
    function createToolbarButton(config: ToolbarButtonConfig): HTMLButtonElement {
        const button = document.createElement('button');
        button.id = config.id;
        button.textContent = config.text;
        button.title = config.title;
        button.className = `px-3 py-1.5 rounded-md text-sm transition-colors ${config.classes || ''}`.trim();

        if (config.icon) {
            button.innerHTML = `${config.icon} ${config.text}`;
        }
        
        const actionFunction = toolbarActions[config.actionKey];

        if (actionFunction && typeof actionFunction === 'function') {
            button.addEventListener('click', () => {
                if (config.actionKey === 'loadAddWordPage') {
                    localStorage.setItem('developer_last_view', 'addWord');
                } else if (config.actionKey === 'loadCreateContentPage') {
                    localStorage.setItem('developer_last_view', 'createContent');
                } else {
                    localStorage.removeItem('developer_last_view');
                }
                actionFunction();
            });
        } else {
            console.warn(`Toolbar action '${config.actionKey}' not found or not a function for button '${config.id}'.`);
        }
        return button;
    }

    function checkDevModeAccess() {
      if (localStorage.getItem('dev_mode_active') === 'true') {
        if (loginPanel) loginPanel.classList.add('hidden');
        if (mainContent) mainContent.classList.remove('hidden');
        renderToolbar();
        loadInitialContent();
      } else {
        if (loginPanel) loginPanel.classList.remove('hidden');
        if (mainContent) mainContent.classList.add('hidden');
      }
    }

    function handleLogin() {
      const passwordInputElement = document.getElementById('developer-password-input');
      if (!(passwordInputElement instanceof HTMLInputElement)) return; 

      if (passwordInputElement.value === passed_dev_password) {
        localStorage.setItem('dev_mode_active', 'true');
        if (errorMsg) errorMsg.textContent = '';

        if (loginPanel) loginPanel.classList.add('animate-fadeOut');
        if (mainContent) mainContent.classList.add('animate-fadeIn');

        if (loginPanel) {
            loginPanel.addEventListener('animationend', () => {
                if (!loginPanel) return; 
                loginPanel.classList.add('hidden');
                loginPanel.classList.remove('animate-fadeOut');
                if (mainContent) {
                    mainContent.classList.remove('hidden');
                    mainContent.classList.remove('animate-fadeIn'); 
                }
                renderToolbar();
                loadInitialContent();
            }, { once: true });
        }
      } else {
        if (errorMsg) errorMsg.textContent = '密码错误，请重试！';
        passwordInputElement.value = '';
        passwordInputElement.focus();
        if (loginPanel) {
            loginPanel.classList.add('animate-shake');
            loginPanel.addEventListener('animationend', () => {
                if (!loginPanel) return; 
                loginPanel.classList.remove('animate-shake');
            }, { once: true });
        }
      }
    }

    function handleLogout() {
      localStorage.removeItem('dev_mode_active');
      localStorage.removeItem('developer_last_view');
      checkDevModeAccess();
      if (developerPageContent) {
        developerPageContent.innerHTML =
          '<h2 class="text-2xl font-bold text-gray-900 dark:text-white">欢迎来到开发者后台</h2>' +
          '<p class="text-gray-700 dark:text-gray-300">请从上方工具栏选择一个操作。</p>';
      }
    }

    function loadCreateContentPage() {
      window.location.href = '/create';
    }

    function loadAddWordPage() {
      if (!developerPageContent) return;
      developerPageContent.innerHTML =
        `<div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
          <h2 class="text-xl font-bold mb-4 text-gray-900 dark:text-white">添加新单词</h2>
          <form id="developer-add-vocabulary-form" class="space-y-6">
            <div>
              <label for="dev-vocab-word" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">单词</label>
              <input type="text" id="dev-vocab-word" name="word" required class="w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500" placeholder="例如: example">
            </div>
            <div>
              <label for="dev-vocab-markdown" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Markdown 内容 (单词释义、例句等)</label>
              <textarea id="dev-vocab-markdown" name="markdownContent" rows="5" required class="w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500" placeholder="输入 Markdown 格式的单词解释和用法..."></textarea>
            </div>
            <div class="flex items-center">
              <input type="checkbox" id="dev-vocab-draft" name="draft" class="h-4 w-4 text-blue-600 border-gray-300 dark:border-gray-600 rounded focus:ring-blue-500">
              <label for="dev-vocab-draft" class="ml-2 block text-sm text-gray-900 dark:text-gray-300">设为草稿</label>
            </div>
            <div class="flex justify-end">
              <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">添加单词</button>
            </div>
          </form>
        </div>`;

      const newVocabForm = document.getElementById('developer-add-vocabulary-form');
      if (newVocabForm instanceof HTMLFormElement) {
        newVocabForm.addEventListener('submit', handleDevAddVocabularySubmit);
      }
    }

    /**
     * 处理添加新词汇表单的提交。
     * @param event - 提交事件对象
     */
    async function handleDevAddVocabularySubmit(event: Event) { // Type event as Event or SubmitEvent
      event.preventDefault();
      const form = event.target;
      if (!(form instanceof HTMLFormElement)) return;

      const formData = new FormData(form);
      const word = formData.get('word');
      const markdownContent = formData.get('markdownContent');
      const draft = formData.has('draft'); 

      if (typeof word !== 'string' || !word.trim() || typeof markdownContent !== 'string' || !markdownContent.trim()) {
        alert('单词和 Markdown 内容不能为空！');
        return;
      }

      const currentDate = new Date().toISOString().split('T')[0];

      try {
        const response = await fetch('/api/create-vocabulary', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            word,
            markdownContent,
            date: currentDate,
            draft,
          }),
        });

        if (!response.ok) {
            const errorText = await response.text(); 
            throw new Error(`Server error: ${response.status} ${response.statusText}. ${errorText}`);
        }

        const result = await response.json();

        if (result.success) {
          alert('单词添加成功！');
          form.reset();
        } else {
          alert(`添加失败: ${result.message || '未知错误'}`);
        }
      } catch (error) {
        console.error('添加单词时出错:', error);
        const errorMessage = error instanceof Error ? error.message : String(error);
        alert(`添加单词时发生错误: ${errorMessage}`);
      }
    }

    function loadInitialContent() {
        const lastView = localStorage.getItem('developer_last_view');
        if (lastView === 'addWord') {
            loadAddWordPage();
        } else if (lastView === 'createContent') {
            loadCreateContentPage();
        } else {
            if (developerPageContent) { 
                developerPageContent.innerHTML =
                    '<h2 class="text-2xl font-bold text-gray-900 dark:text-white">欢迎来到开发者后台</h2>' +
                    '<p class="text-gray-700 dark:text-gray-300">请从上方工具栏选择一个操作。</p>';
            }
        }
    }

    if (loginBtn) {
        loginBtn.addEventListener('click', handleLogin);
    }
    const passwordFieldForEnterKey = document.getElementById('developer-password-input');
    if (passwordFieldForEnterKey instanceof HTMLInputElement) {
        passwordFieldForEnterKey.addEventListener('keypress', (e: KeyboardEvent) => { // Type 'e' as KeyboardEvent
            if (e.key === 'Enter') {
                handleLogin();
            }
        });
    }

    checkDevModeAccess();
  </script>

  <style>
    /* Styles remain the same as before */
    @keyframes fadeOut {
      from { opacity: 1; transform: translateY(0); }
      to { opacity: 0; transform: translateY(-20px); }
    }
    .animate-fadeOut {
      animation: fadeOut 0.3s ease-out forwards;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    .animate-fadeIn {
      animation: fadeIn 0.3s ease-in forwards;
    }
    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
      20%, 40%, 60%, 80% { transform: translateX(5px); }
    }
    .animate-shake {
      animation: shake 0.5s ease-in-out forwards;
    }
    kbd {
        font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    }
  </style>
</Layout>