---
import Layout from '../layouts/Layout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import type { AstroComponentFactory } from 'astro/runtime/server/index.js';

// Define processed entry type
type ProcessedVocabularyEntry = CollectionEntry<'vocabulary'> & { Content: AstroComponentFactory };

// Get all non-draft vocabulary entries
const rawEntries = await getCollection('vocabulary');

// Pre-render content and prepare data
const processedEntries = await Promise.all(
  rawEntries
    .filter(entry => !entry.data.draft)
    .map(async (entry: CollectionEntry<'vocabulary'>) => {
      const { Content } = await entry.render();
      return {
        ...entry,
        Content: Content as AstroComponentFactory
      };
    })
);

// Sort entries by date descending
const vocabularyEntries: ProcessedVocabularyEntry[] = (processedEntries as ProcessedVocabularyEntry[])
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

// Data for client-side (metadata only)
const clientVocabularyData = vocabularyEntries.map(entry => ({
  id: entry.id,
  word: entry.data.word,
  date: entry.data.date.toISOString(),
  slug: entry.slug
}));
---

<Layout title="单词学习">
  <div class="max-w-6xl mx-auto py-10 px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center mb-10">
      <h1 class="text-4xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-5xl">单词卡片</h1>
    </div>

    {vocabularyEntries.length === 0 ? (
      <div class="text-center py-20">
        <svg class="mx-auto h-16 w-16 text-gray-400 dark:text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
          <path vector-effect="non-scaling-stroke" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 6.042A8.967 8.967 0 006 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 016 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 016-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0018 18a8.967 8.967 0 00-6 2.292m0-14.25v14.25" />
        </svg>
        <h3 class="mt-6 text-xl font-semibold text-gray-800 dark:text-gray-200">暂无单词</h3>
        <p class="mt-2 text-base text-gray-500 dark:text-gray-400">开始添加你的第一个单词卡片吧！</p>
      </div>
    ) : (
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-8">
        {vocabularyEntries.map((entry: ProcessedVocabularyEntry, index: number) => (
          <>
            <button
              type="button"
              class="word-trigger group block w-full text-left p-6 bg-white dark:bg-gray-800/70 rounded-xl shadow-lg hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900 transition-all duration-300 ease-in-out hover:-translate-y-1"
              data-index={index}
            >
              <h3 class="text-2xl font-semibold text-blue-600 dark:text-blue-400 group-hover:text-blue-700 dark:group-hover:text-blue-300 mb-2 truncate">
                {entry.data.word}
              </h3>
              <p class="text-sm text-gray-500 dark:text-gray-400">
                {new Date(entry.data.date).toLocaleDateString('zh-CN', { year: 'numeric', month: 'long', day: 'numeric' })}
              </p>
            </button>
            {/* Hidden content, to be injected into modal */}
            <div id={`content-for-${index}`} class="hidden">
              <entry.Content />
            </div>
          </>
        ))}
      </div>
    )}
  </div>

  {/* Modal Structure */}
  {/* 
    Layout Optimization: Centering & Margins
    - The modal (#vocabularyModal) uses `fixed inset-0 flex items-center justify-center` which handles centering on the screen.
    - `p-4` on #vocabularyModal provides screen edge spacing for the modal itself.
    - The modal content container (#modalContentContainer) has `max-w-3xl lg:max-w-4xl` to control its width and intrinsic horizontal margins (mx-auto effectively, due to parent flex centering).
    - Internal padding on #modalContentContainer (p-5 for header, p-6 for body, p-4 for footer) provides visual balance for the content *within* the card.
  */}
  <div 
    id="vocabularyModal" 
    class="fixed inset-0 bg-black/75 hidden items-center justify-center p-4 z-50 transition-opacity duration-300 ease-in-out opacity-0"
    aria-labelledby="modalWordTitle"
    role="dialog"
    aria-modal="true"
  >
    <div 
      id="modalContentContainer" 
      class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-3xl lg:max-w-4xl max-h-[90vh] flex flex-col transform transition-all duration-300 ease-in-out scale-95 opacity-0"
    >
      <div class="flex justify-between items-center p-5 border-b border-gray-200 dark:border-gray-700">
        <h2 id="modalWordTitle" class="text-3xl font-bold text-blue-600 dark:text-blue-400"></h2>
        <button 
          id="closeModalButton" 
          type="button" 
          class="p-1.5 rounded-full text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-1 dark:focus:ring-offset-gray-800 transition-colors"
          aria-label="关闭模态框"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      {/* 
        Markdown Style Optimization:
        - `prose` and `dark:prose-invert` classes from @tailwindcss/typography are applied.
        - `max-w-none` ensures prose content uses the full width of this container.
        - Custom styles in the <style> block below further refine typography for this specific modal.
        - `p-6` provides padding around the content. Could be increased if more "internal margin" is desired.
      */}
      <div id="modalBody" class="p-6 prose dark:prose-invert max-w-none overflow-y-auto flex-grow">
        {/* Content will be injected here by JavaScript */}
      </div>
      <div class="p-4 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50 rounded-b-lg">
        <p id="modalDate" class="text-sm text-gray-600 dark:text-gray-400"></p>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* 
    SECTION: Markdown Content Style Optimizations for Vocabulary Modal
    File: vocabulary.astro
    Scope: Styles applied to the #modalBody when it contains .prose content.
    -------------------------------------------------------------------------
    These styles aim to enhance readability and visual comfort of Markdown content
    within the vocabulary learning cards. They leverage and override defaults 
    from the @tailwindcss/typography plugin.
  */

  /* 
    Target: #modalBody with .prose class
    Intent: 
      1. Increase the base font size for better readability on desktop screens.
         This size is inherited by child elements like <p>, <li>, and acts as
         a base for scaling headings.
      2. Set a generous line height for improved intra-paragraph readability (段内行间距).
         This helps with tracking lines of text, especially for longer sentences.
  */
  #modalBody.prose {
    font-size: 1.125rem; /* Sets base font to 18px (if HTML root is 16px). Equivalent to Tailwind's `text-lg` or `prose-lg` base. */
    line-height: 1.8;    /* Increases spacing between lines within the same paragraph. */
  }

  /*
    Target: Paragraphs within the styled modal body
    Intent: 
      1. Define clearer spacing between paragraphs (段落间距).
         Ensures distinct separation between blocks of text, improving overall structure.
      2. Maintain consistent line height within paragraphs (inherited from #modalBody.prose).
    Note: 
      - The original `margin-bottom: 1.75em;` was quite generous. `1.5em` is also ample.
        Adjust this value based on visual preference for "更宽阔的间距".
      - `margin-top` is also added for consistency, though the typography plugin often handles
        spacing between elements (e.g., heading followed by paragraph) intelligently.
  */
  #modalBody.prose p {
    margin-top: 1em; 
    margin-bottom: 1.5em; /* Defines the space after each paragraph. */
    /* line-height is inherited from #modalBody.prose, no need to redeclare unless different. */
  }

  /*
    Target: Headings (h1-h6) within the styled modal body
    Intent: 
      Refine vertical spacing around headings to ensure they are clearly
      associated with their subsequent content and distinct from preceding content.
    Note: 
      - The @tailwindcss/typography plugin provides default heading margins. 
        These are overrides for more specific control if defaults are insufficient.
      - The original file had more specific (and somewhat inconsistent) margins.
        These are slightly more harmonized.
  */
  #modalBody.prose h1,
  #modalBody.prose h2,
  #modalBody.prose h3,
  #modalBody.prose h4,
  #modalBody.prose h5,
  #modalBody.prose h6 {
    margin-top: 1.6em;    /* Increased top margin for better separation from previous content. */
    margin-bottom: 0.6em; /* Standardized bottom margin for headings. */
  }

  /*
    Target: Strong (bold) text within the styled modal body
    Intent: Ensure bolded text has adequate visual weight to stand out.
  */
  #modalBody.prose strong {
    font-weight: 600; /* Corresponds to `font-semibold`. The plugin default might vary. */
  }
  
  /* 
    Target: Unordered and Ordered Lists
    Intent: Ensure list items also benefit from the increased base font size and line height.
            Adjust margins for lists if necessary.
  */
  #modalBody.prose ul,
  #modalBody.prose ol {
    margin-top: 1em;
    margin-bottom: 1.5em;
  }
  #modalBody.prose li {
    margin-top: 0.25em;
    margin-bottom: 0.25em;
  }
  #modalBody.prose li p { /* Paragraphs inside list items */
    margin-top: 0.5em;
    margin-bottom: 0.5em;
  }


  /* 
    General Note on Extensibility & Maintainability:
    - By targeting `#modalBody.prose`, these styles are scoped to the vocabulary modal.
    - Using the @tailwindcss/typography plugin as a base allows leveraging its comprehensive styling
      while providing specific overrides where needed.
    - Comments explain the design intent and logic, aiding future maintenance.
    - For more complex or reusable prose styling, consider Tailwind's `theme.extend.typography`
      in `tailwind.config.mjs` or creating dedicated CSS component classes.
  */

  /* Ensure modal is not interactive when hidden (already present and correct) */
  #vocabularyModal.hidden {
    pointer-events: none;
  }
</style>

<script define:vars={{ clientVocabularyData }} is:inline>
  // JavaScript remains unchanged as the request focuses on UI/CSS.
  // ... (existing script content)
  const wordTriggers = document.querySelectorAll('.word-trigger');
  const modal = document.getElementById('vocabularyModal');
  const modalContentContainer = document.getElementById('modalContentContainer');
  const modalWordTitle = document.getElementById('modalWordTitle');
  const modalBody = document.getElementById('modalBody');
  const modalDate = document.getElementById('modalDate');
  const closeModalButton = document.getElementById('closeModalButton');

  let previouslyFocusedElement = null; 

  function openModal(index) {
    const entryData = clientVocabularyData[index];
    const hiddenContentEl = document.getElementById(`content-for-${index}`);

    if (entryData && hiddenContentEl && modal && modalContentContainer && modalWordTitle && modalBody && modalDate) {
      previouslyFocusedElement = document.activeElement; 

      modalWordTitle.textContent = entryData.word;
      modalBody.innerHTML = hiddenContentEl.innerHTML;
      modalDate.textContent = `添加日期: ${new Date(entryData.date).toLocaleDateString('zh-CN', { year: 'numeric', month: 'long', day: 'numeric' })}`;
      
      modal.classList.remove('hidden');
      modal.scrollTop; 

      modal.classList.remove('opacity-0');
      modalContentContainer.classList.remove('opacity-0', 'scale-95');
      modalContentContainer.classList.add('opacity-100', 'scale-100');

      closeModalButton.focus();
    }
  }

  function closeModal() {
    if (modal && modalContentContainer && modalBody && modalWordTitle && modalDate) {
      modal.classList.add('opacity-0');
      modalContentContainer.classList.add('opacity-0', 'scale-95');
      modalContentContainer.classList.remove('opacity-100', 'scale-100');

      setTimeout(() => {
        modal.classList.add('hidden');
        
        modalBody.innerHTML = ''; 
        modalWordTitle.textContent = '';
        modalDate.textContent = '';

        if (previouslyFocusedElement) {
          previouslyFocusedElement.focus();
          previouslyFocusedElement = null;
        }

      }, 300); 
    }
  }

  wordTriggers.forEach(trigger => {
    trigger.addEventListener('click', (event) => {
      const button = event.target.closest('.word-trigger');
      if (button) {
        const index = parseInt(button.dataset.index, 10);
        if (!isNaN(index)) {
          openModal(index);
        }
      }
    });
  });

  if (closeModalButton) {
    closeModalButton.addEventListener('click', closeModal);
  }

  if (modal) {
    modal.addEventListener('click', (event) => {
      if (event.target === modal) { 
        closeModal();
      }
    });
  }

  document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
      closeModal();
    }
  });
</script>