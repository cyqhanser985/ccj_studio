---
import Layout from '../layouts/Layout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import type { AstroComponentFactory } from 'astro/runtime/server/index.js';

// 定义处理后条目的类型
type ProcessedVocabularyEntry = CollectionEntry<'vocabulary'> & { Content: AstroComponentFactory };

// 获取所有非草稿的单词条目
const rawEntries = await getCollection('vocabulary');

// 提前渲染所有条目内容并准备数据
const processedEntries = await Promise.all(
  rawEntries
    .filter(entry => !entry.data.draft)
    .map(async (entry: CollectionEntry<'vocabulary'>) => {
      const { Content } = await entry.render();
      return {
        ...entry,
        Content: Content as AstroComponentFactory
      };
    })
);

// 按日期降序排列最终结果
const vocabularyEntries: ProcessedVocabularyEntry[] = (processedEntries as ProcessedVocabularyEntry[])
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

// 为客户端准备的数据 (不包含 Content 组件，只包含元数据)
const clientVocabularyData = vocabularyEntries.map(entry => ({
  id: entry.id,
  word: entry.data.word,
  date: entry.data.date.toISOString(),
  slug: entry.slug
}));
---

<Layout title="单词学习">
  <div class="max-w-6xl mx-auto py-10 px-4 sm:px-6 lg:px-8"> {/* 稍微加宽最大宽度和边距 */}
    <div class="flex justify-between items-center mb-10"> {/* 增加底部间距 */}
      <h1 class="text-4xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-5xl">单词卡片</h1>
      {/* 可以考虑在这里添加一个 "添加新单词" 的按钮 */}
      {/* <a href="/admin/vocabulary/new" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
        添加新单词
      </a> */}
    </div>

    {vocabularyEntries.length === 0 ? (
      <div class="text-center py-20">
        <svg class="mx-auto h-16 w-16 text-gray-400 dark:text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
          <path vector-effect="non-scaling-stroke" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 6.042A8.967 8.967 0 006 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 016 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 016-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0018 18a8.967 8.967 0 00-6 2.292m0-14.25v14.25" />
        </svg>
        <h3 class="mt-6 text-xl font-semibold text-gray-800 dark:text-gray-200">暂无单词</h3>
        <p class="mt-2 text-base text-gray-500 dark:text-gray-400">开始添加你的第一个单词卡片吧！</p>
      </div>
    ) : (
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-8"> {/* 调整 gap */}
        {vocabularyEntries.map((entry: ProcessedVocabularyEntry, index: number) => (
          <>
            <button
              type="button"
              class="word-trigger group block w-full text-left p-6 bg-white dark:bg-gray-800/70 rounded-xl shadow-lg hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900 transition-all duration-300 ease-in-out hover:-translate-y-1"
              data-index={index}
            >
              <h3 class="text-2xl font-semibold text-blue-600 dark:text-blue-400 group-hover:text-blue-700 dark:group-hover:text-blue-300 mb-2 truncate">
                {entry.data.word}
              </h3>
              <p class="text-sm text-gray-500 dark:text-gray-400">
                {new Date(entry.data.date).toLocaleDateString('zh-CN', { year: 'numeric', month: 'long', day: 'numeric' })}
              </p>
            </button>
            <div id={`content-for-${index}`} class="hidden">
              <entry.Content />
            </div>
          </>
        ))}
      </div>
    )}
  </div>

  {/* Modal Structure */}
  <div 
    id="vocabularyModal" 
    class="fixed inset-0 bg-black/75 hidden items-center justify-center p-4 z-50 transition-opacity duration-300 ease-in-out opacity-0"
    aria-labelledby="modalWordTitle"
    role="dialog"
    aria-modal="true"
  >
    <div 
      id="modalContentContainer" 
      class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-3xl lg:max-w-4xl max-h-[90vh] flex flex-col transform transition-all duration-300 ease-in-out scale-95 opacity-0"
    >
      <div class="flex justify-between items-center p-5 border-b border-gray-200 dark:border-gray-700">
        <h2 id="modalWordTitle" class="text-3xl font-bold text-blue-600 dark:text-blue-400"></h2>
        <button 
          id="closeModalButton" 
          type="button" 
          class="p-1.5 rounded-full text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-1 dark:focus:ring-offset-gray-800 transition-colors"
          aria-label="关闭模态框"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div id="modalBody" class="p-6 prose dark:prose-invert max-w-none overflow-y-auto flex-grow">
        {/* Content will be injected here */}
      </div>
      <div class="p-4 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50 rounded-b-lg">
        <p id="modalDate" class="text-sm text-gray-600 dark:text-gray-400"></p>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* 基本的Prose样式调整 */
  .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
    margin-top: 0.5em;
    margin-bottom: 0.25em;
  }
  #modalBody.prose p {
    margin-bottom: 1.75em;
    line-height: 1.7;
  }
  #modalBody.prose h3,
  #modalBody.prose h4 {
    margin-top: 1.5em;
    margin-bottom: 0.5em;
  }
  #modalBody.prose p > strong {
    font-weight: 600;
  }
  .prose p {
    margin-bottom: 0.5em;
  }

  /* 确保模态框在隐藏时不可交互 */
  #vocabularyModal.hidden {
    pointer-events: none;
  }
</style>

<script define:vars={{ clientVocabularyData }} is:inline>
  const wordTriggers = document.querySelectorAll('.word-trigger');
  const modal = document.getElementById('vocabularyModal');
  const modalContentContainer = document.getElementById('modalContentContainer');
  const modalWordTitle = document.getElementById('modalWordTitle');
  const modalBody = document.getElementById('modalBody');
  const modalDate = document.getElementById('modalDate');
  const closeModalButton = document.getElementById('closeModalButton');

  let previouslyFocusedElement = null; // 用于辅助功能，恢复焦点

  function openModal(index) {
    const entryData = clientVocabularyData[index];
    const hiddenContentEl = document.getElementById(`content-for-${index}`);

    if (entryData && hiddenContentEl && modal && modalContentContainer && modalWordTitle && modalBody && modalDate) {
      previouslyFocusedElement = document.activeElement; // 保存当前焦点

      modalWordTitle.textContent = entryData.word;
      modalBody.innerHTML = hiddenContentEl.innerHTML;
      modalDate.textContent = `添加日期: ${new Date(entryData.date).toLocaleDateString('zh-CN', { year: 'numeric', month: 'long', day: 'numeric' })}`;
      
      modal.classList.remove('hidden');
      // Trigger reflow to enable transition
      modal.scrollTop; // Reading a property like scrollTop, offsetHeight, etc. forces reflow

      // Start animation
      modal.classList.remove('opacity-0');
      modalContentContainer.classList.remove('opacity-0', 'scale-95');
      modalContentContainer.classList.add('opacity-100', 'scale-100');

      // Focus management for accessibility
      closeModalButton.focus();
    }
  }

  function closeModal() {
    if (modal && modalContentContainer && modalBody && modalWordTitle && modalDate) {
      // Start animation out
      modal.classList.add('opacity-0');
      modalContentContainer.classList.add('opacity-0', 'scale-95');
      modalContentContainer.classList.remove('opacity-100', 'scale-100');

      // Wait for animation to finish before hiding
      setTimeout(() => {
        modal.classList.add('hidden');
        // modal.classList.remove('flex'); // flex is not directly set on modal anymore for opening, opacity handles visibility
        
        // Clear content after hiding to prevent flash if re-opened quickly
        modalBody.innerHTML = ''; 
        modalWordTitle.textContent = '';
        modalDate.textContent = '';

        // Restore focus to the element that opened the modal
        if (previouslyFocusedElement) {
          previouslyFocusedElement.focus();
          previouslyFocusedElement = null;
        }

      }, 300); // Match CSS transition duration (duration-300)
    }
  }

  wordTriggers.forEach(trigger => {
    trigger.addEventListener('click', (event) => {
      const button = event.target.closest('.word-trigger');
      if (button) {
        const index = parseInt(button.dataset.index, 10);
        if (!isNaN(index)) {
          openModal(index);
        }
      }
    });
  });

  if (closeModalButton) {
    closeModalButton.addEventListener('click', closeModal);
  }

  if (modal) {
    // Close modal if clicking outside the content container (on the overlay)
    modal.addEventListener('click', (event) => {
      if (event.target === modal) { 
        closeModal();
      }
    });
  }

  // Close modal on Escape key
  document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
      closeModal();
    }
  });
</script>