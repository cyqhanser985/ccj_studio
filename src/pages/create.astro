---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// 获取所有博客文章和笔记条目
const blogEntries = await getCollection('blog');
const notesEntries = await getCollection('notes');
const allEntries = [...blogEntries, ...notesEntries];

// 提取所有唯一的分类，并过滤掉空值
const categories = [...new Set(allEntries
  .map(entry => entry.data.category)
  .filter(Boolean))]; // filter(Boolean) 会移除 undefined, null, false, 0, NaN, ''

// 提取所有唯一的标签，并处理可能不存在的 tags 字段
const tags = [...new Set(allEntries
  .flatMap(entry => entry.data.tags || []))]; // flatMap 会将嵌套数组扁平化，|| [] 确保即使 tags 未定义也不会出错
---

<Layout title="创建新内容">
  <div class="max-w-4xl mx-auto py-8 px-4">
    <h1 class="text-3xl font-bold mb-6 text-gray-900 dark:text-white">创建新内容</h1>

    {/* 调试信息面板，仅在 localhost 环境下显示 */}
    <div id="debug-panel" class="bg-gray-100 dark:bg-gray-900 border-l-4 border-blue-500 p-4 mb-6 rounded-lg hidden">
      <h3 class="text-lg font-semibold mb-2 text-gray-900 dark:text-white">调试信息</h3>
      <pre id="debug-log" class="text-xs overflow-auto max-h-32 bg-white dark:bg-gray-800 p-2 rounded text-gray-700 dark:text-gray-300">等待日志...</pre>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6">
      <form id="create-form" class="space-y-6">
        {/* 内容类型选择 */}
        <div>
          <label for="content-type" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">内容类型</label>
          <select id="content-type" name="content-type" required class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500">
            <option value="blog">博客文章</option>
            <option value="notes">学习笔记</option>
          </select>
        </div>

        {/* 标题输入 */}
        <div>
          <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">标题</label>
          <input type="text" id="title" name="title" required placeholder="输入标题" class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500">
        </div>

        {/* 文件名输入 */}
        <div>
          <label for="filename" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">文件名 (Slug)</label>
          <input type="text" id="filename" name="filename" placeholder="输入文件名（可选，留空则自动生成）" class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500">
          <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">仅使用小写英文、数字、连字符。例如: "my-first-post"。不含扩展名。</p>
        </div>

        {/* 描述输入 */}
        <div>
          <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">描述</label>
          <textarea id="description" name="description" rows="2" placeholder="输入简短描述（可选）" class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
        </div>

        {/* 分类输入 */}
        <div>
          <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">分类</label>
          <div class="flex space-x-2">
            <input list="category-list" id="category" name="category" placeholder="选择或输入新分类" class="flex-1 rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500">
            <datalist id="category-list">
              {categories.map(category => (
                <option value={category} />
              ))}
            </datalist>
          </div>
        </div>

        {/* 标签输入 */}
        <div>
          <label for="tag-input" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">标签</label>
          <div class="flex space-x-2">
            <input id="tag-input" type="text" placeholder="输入标签后按回车或点击添加" list="tag-list" class="flex-1 rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500">
            <datalist id="tag-list">
              {tags.map(tag => (
                <option value={tag} />
              ))}
            </datalist>
            <button type="button" id="add-tag-btn" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
              添加
            </button>
          </div>
          <div id="tags-display-container" class="flex flex-wrap gap-2 mt-2"></div>
          {/* 隐藏输入框，用于表单提交时收集所有标签 */}
          <input type="hidden" id="tags-hidden-input" name="tags" value="">
        </div>

        {/* 内容输入 (Markdown) */}
        <div>
          <label for="content-body" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">内容 (Markdown)</label>
          
          {/* 图片上传控件 */}
          <div class="mb-4">
            <label for="image-upload-input" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">上传图片到内容</label>
            <input type="file" id="image-upload-input" name="image-upload" accept="image/*" class="w-full text-sm text-gray-900 dark:text-gray-300 border border-gray-300 dark:border-gray-700 rounded-lg cursor-pointer bg-gray-50 dark:bg-gray-700 focus:outline-none file:bg-blue-50 file:dark:bg-gray-800 file:text-blue-600 file:dark:text-blue-300 file:font-medium file:py-2 file:px-4 file:border-0 file:mr-4 hover:file:bg-blue-100 dark:hover:file:bg-gray-700">
            <div id="image-preview-container" class="mt-2"></div>
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">上传图片后，Markdown 引用将自动插入到下方内容区域的光标位置。</p>
          </div>

          <textarea id="content-body" name="content" rows="15" placeholder="在此输入 Markdown 格式的内容..." class="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 font-mono"></textarea>
        </div>
        
        {/* 草稿开关 */}
        <div class="flex items-center">
          <input id="draft-checkbox" name="draft" type="checkbox" class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600">
          <label for="draft-checkbox" class="ml-2 block text-sm text-gray-900 dark:text-gray-300">设为草稿</label>
        </div>
        
        {/* 操作按钮 */}
        <div class="flex justify-end space-x-3">
          <button type="button" id="preview-btn" class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 shadow-sm text-sm font-medium rounded-md text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            预览
          </button>
          <button type="submit" id="save-btn" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            保存
          </button>
        </div>
      </form>
    </div>
    
    {/* 预览模态框 */}
    <div id="preview-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
      <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-bold text-gray-900 dark:text-white">预览</h2>
          <button id="close-preview-btn" aria-label="关闭预览" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <article id="preview-content-area" class="prose dark:prose-invert max-w-none">
          {/* 预览内容将在这里动态显示 */}
        </article>
      </div>
    </div>
  </div>
</Layout>

<script>
  // --- DOM 元素获取 ---
  const debugPanel = document.getElementById('debug-panel') as HTMLDivElement;
  const debugLog = document.getElementById('debug-log') as HTMLPreElement;
  
  const createForm = document.getElementById('create-form') as HTMLFormElement;
  const contentTypeSelect = document.getElementById('content-type') as HTMLSelectElement;
  const titleInput = document.getElementById('title') as HTMLInputElement;
  const filenameInput = document.getElementById('filename') as HTMLInputElement;
  const descriptionTextarea = document.getElementById('description') as HTMLTextAreaElement;
  const categoryInput = document.getElementById('category') as HTMLInputElement;
  const contentBodyTextarea = document.getElementById('content-body') as HTMLTextAreaElement;
  const draftCheckbox = document.getElementById('draft-checkbox') as HTMLInputElement;

  // 标签管理元素
  const tagInputElement = document.getElementById('tag-input') as HTMLInputElement;
  const addTagButton = document.getElementById('add-tag-btn') as HTMLButtonElement;
  const tagsDisplayContainer = document.getElementById('tags-display-container') as HTMLDivElement;
  const tagsHiddenInput = document.getElementById('tags-hidden-input') as HTMLInputElement;

  // 图片上传元素
  const imageUploadInput = document.getElementById('image-upload-input') as HTMLInputElement;
  const imagePreviewContainer = document.getElementById('image-preview-container') as HTMLDivElement;

  // 预览模态框元素
  const previewButton = document.getElementById('preview-btn') as HTMLButtonElement;
  const previewModal = document.getElementById('preview-modal') as HTMLDivElement;
  const closePreviewButton = document.getElementById('close-preview-btn') as HTMLButtonElement;
  const previewContentArea = document.getElementById('preview-content-area') as HTMLDivElement;
  
  // --- 调试日志功能 ---
  const isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
  if (isLocalhost) {
    debugPanel.classList.remove('hidden');
    const originalConsoleLog = console.log;
    const originalConsoleError = console.error;
    const originalConsoleWarn = console.warn;

    const logToDebugPanel = (type: string, ...args: any[]) => {
      try {
        const timestamp = new Date().toLocaleTimeString();
        const formattedArgs = args.map(arg => 
          typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
        ).join(' ');
        const logEntry = `[${timestamp}] [${type}] ${formattedArgs}`;
        const logs = (debugLog.textContent || '').split('\n');
        if (logs.length > 100) logs.pop();
        debugLog.textContent = logEntry + '\n' + logs.join('\n');
      } catch (e) { /* 忽略记录错误 */ }
    };

    console.log = (...args) => { originalConsoleLog.apply(console, args); logToDebugPanel('LOG', ...args); };
    console.error = (...args) => { originalConsoleError.apply(console, args); logToDebugPanel('ERROR', ...args); };
    console.warn = (...args) => { originalConsoleWarn.apply(console, args); logToDebugPanel('WARN', ...args); };
    window.addEventListener('error', (event) => logToDebugPanel('GLOBAL ERROR', event.message, '@', event.filename, 'L', event.lineno));
    window.addEventListener('unhandledrejection', (event) => logToDebugPanel('UNHANDLED PROMISE', event.reason));
    console.log('调试面板已初始化。');
  }

  // --- 标签管理 ---
  let currentTagsSet: Set<string> = new Set(); 

  function renderTags() {
    tagsDisplayContainer.innerHTML = ''; 
    currentTagsSet.forEach(tag => {
      const tagElement = document.createElement('div');
      tagElement.className = 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded px-2 py-1 flex items-center text-sm';
      
      const tagNameSpan = document.createElement('span');
      tagNameSpan.textContent = tag;
      
      const removeButton = document.createElement('button');
      removeButton.type = 'button';
      removeButton.className = 'ml-1 text-blue-500 hover:text-blue-700 focus:outline-none';
      removeButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>`;
      removeButton.onclick = () => {
        currentTagsSet.delete(tag);
        renderTags(); 
      };
      
      tagElement.appendChild(tagNameSpan);
      tagElement.appendChild(removeButton);
      tagsDisplayContainer.appendChild(tagElement);
    });
    tagsHiddenInput.value = JSON.stringify(Array.from(currentTagsSet));
    // 在每次渲染标签后打印当前标签集合，方便调试
    console.log('Updated currentTagsSet:', currentTagsSet); 
  }

  function handleAddTag() {
    const tagValue = tagInputElement.value.trim();
    if (tagValue) {
      currentTagsSet.add(tagValue);
      renderTags();
      tagInputElement.value = ''; 
      tagInputElement.focus(); 
    }
  }

  addTagButton.addEventListener('click', handleAddTag);
  tagInputElement.addEventListener('keydown', (event) => {
    if (event.key === 'Enter') {
      event.preventDefault(); 
      handleAddTag();
    }
  });

  // --- 图片上传处理 ---
  imageUploadInput.addEventListener('change', async (event) => {
    const files = (event.target as HTMLInputElement).files;
    if (!files || files.length === 0) return;

    const file = files[0];
    const formData = new FormData();
    formData.append('image', file);

    imagePreviewContainer.innerHTML = ''; 
    const uploadingMsg = document.createElement('p');
    uploadingMsg.textContent = '正在上传图片...';
    uploadingMsg.className = 'text-sm text-gray-500 dark:text-gray-400';
    imagePreviewContainer.appendChild(uploadingMsg);

    try {
      const response = await fetch('/api/upload-image', { method: 'POST', body: formData });
      uploadingMsg.remove(); 

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: '上传失败，无法解析服务器错误信息。' }));
        throw new Error(errorData.message || `HTTP 错误: ${response.status}`);
      }

      const result = await response.json();
      if (result.success && result.imageUrl) {
        const imageName = result.imageUrl.split('/').pop() || 'image';
        const altText = prompt('请输入图片的描述 (alt text):', imageName.split('.').shift() || 'image_alt_text');
        
        const relativeImageUrl = `../../../public${result.imageUrl}`; 
        const imageMarkdown = `![${altText || imageName}](${relativeImageUrl})\n`;
        
        const cursorPos = contentBodyTextarea.selectionStart;
        const textBefore = contentBodyTextarea.value.substring(0, cursorPos);
        const textAfter = contentBodyTextarea.value.substring(cursorPos);
        contentBodyTextarea.value = textBefore + imageMarkdown + textAfter;
        contentBodyTextarea.focus(); 
        contentBodyTextarea.selectionStart = contentBodyTextarea.selectionEnd = cursorPos + imageMarkdown.length; 

        const imgPreview = document.createElement('img');
        imgPreview.src = result.imageUrl; 
        imgPreview.alt = altText || '图片预览';
        imgPreview.className = 'max-w-xs max-h-32 mt-2 rounded border border-gray-300 dark:border-gray-600';
        imagePreviewContainer.appendChild(imgPreview);

        const successMsg = document.createElement('p');
        successMsg.textContent = `图片上传成功: ${result.imageUrl}`;
        successMsg.className = 'text-sm text-green-600 dark:text-green-400 mt-1';
        imagePreviewContainer.appendChild(successMsg);

        imageUploadInput.value = ''; 
      } else {
        throw new Error(result.message || '图片上传成功，但未返回有效的图片URL。');
      }
    } catch (error) {
      console.error('图片上传错误:', error);
      const errorMsg = document.createElement('p');
      errorMsg.textContent = `图片上传失败: ${error instanceof Error ? error.message : String(error)}`;
      errorMsg.className = 'text-sm text-red-600 dark:text-red-400 mt-1';
      imagePreviewContainer.appendChild(errorMsg);
    }
  });

  // --- 辅助函数 ---
  function generateSlug(title: string, existingSlug: string = ''): string {
    if (existingSlug.trim()) {
      return existingSlug.trim().toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '').replace(/--+/g, '-').replace(/\.md$/i, '');
    }
    if (!title) return `untitled-${Date.now()}`;
    
    let slug = title.toLowerCase()
      .replace(/\s+/g, '-')      
      .replace(/[^\w-]+/g, '') 
      .replace(/--+/g, '-')     
      .replace(/^-+|-+$/g, ''); 
    
    return slug || `untitled-${Date.now()}`; 
  }

  function formatFrontmatterValue(value: any, key: string): string {
    if (key === 'date' || typeof value === 'boolean' || typeof value === 'number') {
      return String(value); 
    }
    if (Array.isArray(value)) {
      // 当前使用 JSON.stringify 生成如 ["tag1", "tag2"] 的格式，这是有效的 YAML
      return JSON.stringify(value); 
    }
    return `"${String(value).replace(/"/g, '\\"')}"`;
  }

  // --- 表单提交处理 ---
  createForm.addEventListener('submit', async (event) => {
    event.preventDefault();
    console.log('表单提交开始...');

    const contentType = contentTypeSelect.value;
    const title = titleInput.value.trim();
    const description = descriptionTextarea.value.trim();
    const category = categoryInput.value.trim();
    const contentBody = contentBodyTextarea.value;
    const isDraft = draftCheckbox.checked;
    const currentDate = new Date().toISOString(); 

    // === 调试点 1：检查标签数组 ===
    const tagsArray = Array.from(currentTagsSet); 
    console.log('[SUBMIT] Current tags in Set:', currentTagsSet);
    console.log('[SUBMIT] Tags array for frontmatter:', tagsArray);
    // ============================

    if (!title) {
      alert('标题不能为空！');
      titleInput.focus();
      return;
    }

    const slug = generateSlug(title, filenameInput.value.trim());

    const frontmatterData: { [key: string]: any } = {
      title: title,
      date: currentDate, 
      draft: isDraft,
    };
    if (description) frontmatterData.description = description;
    if (category) frontmatterData.category = category;
    if (tagsArray.length > 0) { // 只有当 tagsArray 非空时才添加 tags 属性
      frontmatterData.tags = tagsArray;
    }
    
    console.log('[SUBMIT] frontmatterData object:', frontmatterData); // 调试 frontmatterData

    let markdownContent = '---\n';
    const orderedFields = ['title', 'description', 'date', 'category', 'tags', 'draft']; 
    
    orderedFields.forEach(key => {
      if (frontmatterData.hasOwnProperty(key) && frontmatterData[key] !== undefined) {
        markdownContent += `${key}: ${formatFrontmatterValue(frontmatterData[key], key)}\n`;
      }
    });
    
    for (const key in frontmatterData) {
      if (frontmatterData.hasOwnProperty(key) && !orderedFields.includes(key) && frontmatterData[key] !== undefined) {
        markdownContent += `${key}: ${formatFrontmatterValue(frontmatterData[key], key)}\n`;
      }
    }
    markdownContent += '---\n\n' + contentBody;

    // === 调试点 2：检查生成的 Markdown ===
    console.log('[SUBMIT] Generated Markdown Content for API:\n', markdownContent);
    // ====================================

    const payload = {
      contentType: contentType,
      slug: slug,
      frontmatter: markdownContent, 
    };
    // console.log('准备发送到 API 的数据:', payload); // 这行可以取消注释以查看完整 payload

    try {
      const response = await fetch('/api/create-content', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      console.log('API 响应状态:', response.status);

      const responseText = await response.text(); 
      console.log('API 响应体 (原始文本):', responseText);

      if (!response.ok) {
        let errorData = { message: `HTTP 错误! 状态: ${response.status}. 响应: ${responseText}` };
        try { errorData = JSON.parse(responseText); } 
        catch (e) { console.warn('API 错误响应不是有效的 JSON:', e); }
        throw new Error(errorData.message || `创建内容失败，服务器返回: ${response.status}`);
      }

      let result;
      try { result = JSON.parse(responseText); } 
      catch (e) {
        console.error('无法解析 API 成功响应的 JSON:', e);
        alert('内容可能已创建，但服务器响应格式不正确。请检查控制台获取更多信息。');
        return;
      }
      console.log('API 成功结果:', result);

      // --- 修改跳转逻辑 ---
      if (result.success) { 
        alert('内容创建成功！即将跳转到主页...');
        window.location.href = '/'; // 跳转到主页
      } else {
        const errorMessage = result.message || '创建内容失败，但 API 未返回明确错误信息。';
        if (result.url) { // 如果API仍然返回了url，可以记录一下
             console.warn(`创建操作返回成功状态为false或未定义，但API返回了URL: ${result.url}. 错误信息: ${errorMessage}`);
        }
        throw new Error(errorMessage);
      }
      // --- 结束修改 ---

    } catch (error) {
      console.error('创建内容过程中发生错误:', error);
      alert(`创建失败: ${error instanceof Error ? error.message : String(error)}`);
    }
  });

  // --- 预览功能 ---
  previewButton.addEventListener('click', async () => {
    const title = titleInput.value.trim() || "无标题";
    const content = contentBodyTextarea.value;
    
    previewContentArea.innerHTML = `<h1>${title.replace(/</g, "<").replace(/>/g, ">")}</h1>\n<div>${content.replace(/</g, "<").replace(/>/g, ">").replace(/\n/g, "<br>")}</div>`; 
    previewModal.classList.remove('hidden');
    document.body.style.overflow = 'hidden'; 
  });

  function closePreviewModal() {
    previewModal.classList.add('hidden');
    document.body.style.overflow = ''; 
  }

  closePreviewButton.addEventListener('click', closePreviewModal);
  
  previewModal.addEventListener('click', (event) => {
    if (event.target === previewModal) {
      closePreviewModal();
    }
  });

  window.addEventListener('keydown', (event) => {
    if (event.key === 'Escape' && !previewModal.classList.contains('hidden')) {
      closePreviewModal();
    }
  });

  renderTags(); // 初始化时调用一次以确保UI正确
</script>