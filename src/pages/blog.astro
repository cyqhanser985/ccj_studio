---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import AuthorCard from '../components/AuthorCard.astro';
import PostCard from '../components/PostCard.astro';

// 设置为预渲染模式
export const prerender = true;

// 定义博客条目类型
type BlogEntry = CollectionEntry<'blog'>;

// 获取所有非草稿的博客文章
let blogEntries: BlogEntry[] = [];
try {
  blogEntries = await getCollection('blog', ({ data }: BlogEntry) => !data.draft);
} catch (error) {
  console.error('获取博客集合时出错:', error);
  blogEntries = [];
}

// 按日期排序
const sortedEntries = blogEntries
  .sort((a: BlogEntry, b: BlogEntry) => 
    new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
  );

// 获取所有独特的分类和标签
const categories = [...new Set(blogEntries
  .filter((entry: BlogEntry) => entry.data.category)
  .map((entry: BlogEntry) => entry.data.category))] as string[];

const allTags = blogEntries.flatMap((entry: BlogEntry) => entry.data.tags || []);
const uniqueTags = [...new Set(allTags)].slice(0, 20); // 只显示前20个标签

// 格式化日期的函数
function formatDate(date: Date): string {
  return new Date(date).toLocaleDateString('zh-CN', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}
---

<Layout title="博客文章">
  <div class="max-w-6xl mx-auto">
    <header class="mb-10">
      <h1 class="text-3xl md:text-4xl font-bold mb-4">博客文章</h1>
      <p class="text-gray-600 dark:text-gray-300">探索各种深入的学术主题和思考</p>
    </header>

    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <!-- 文章列表 -->
      <div class="lg:col-span-3">
        <!-- 所有文章使用统一风格展示 -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {sortedEntries.map((blog: BlogEntry) => (
            <PostCard 
              title={blog.data.title}
              description={blog.data.description}
              url={`/blog/${blog.slug}`}
              date={blog.data.date}
              category={blog.data.category}
              tags={blog.data.tags}
            />
          ))}
        </div>
      </div>
      
      <!-- 侧边栏 -->
      <div class="lg:col-span-1">
        <!-- 作者信息卡片 -->
        <div class="mb-8">
          <AuthorCard />
        </div>
        
        <!-- 分类列表 -->
        <section class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm mb-8">
          <h2 class="text-xl font-bold mb-4 pb-2 border-b dark:border-gray-700">分类</h2>
          <ul class="space-y-2">
            {categories.map((category) => {
              if (category) {
                return (
                  <li>
                    <a 
                      href={`/category/${category.toLowerCase()}`} 
                      class="flex justify-between items-center text-blue-600 dark:text-blue-400 hover:underline"
                    >
                      <span>{category}</span>
                      <span class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs px-2 py-1 rounded">
                        {blogEntries.filter((entry: BlogEntry) => entry.data.category === category).length}
                      </span>
                    </a>
                  </li>
                );
              }
              return null;
            })}
          </ul>
        </section>
        
        <!-- 标签云 -->
        <section class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm">
          <h2 class="text-xl font-bold mb-4 pb-2 border-b dark:border-gray-700">标签云</h2>
          <div class="flex flex-wrap gap-2">
            {uniqueTags.map((tag) => (
              <a 
                href={`/tag/${String(tag).toLowerCase()}`}
                class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm px-3 py-1 rounded hover:bg-blue-200 dark:hover:bg-blue-800"
              >
                {tag}
              </a>
            ))}
          </div>
        </section>
      </div>
    </div>
  </div>
</Layout>
