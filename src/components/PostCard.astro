---
export interface Props {
  title: string;
  description?: string;
  url: string;
  date: Date;
  category?: string;
  tags?: string[];
  featured?: boolean;
}

const { title, description, url, date, category, tags, featured = false } = Astro.props;

// 格式化日期
function formatDate(date: Date): string {
  return new Date(date).toLocaleDateString('zh-CN', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}
---

<article class={`bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-all ${featured ? 'border-l-4 border-blue-500' : ''}`}>
  <div class="p-6">
    <h3 class="text-xl font-bold mb-2">
      <a href={url} class="text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400">
        {title}
      </a>
    </h3>
    
    {description && (
      <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-2">{description}</p>
    )}
    
    <div class="flex flex-wrap items-center text-sm text-gray-500 dark:text-gray-400 mb-3">
      <time datetime={date.toISOString()}>
        {formatDate(date)}
      </time>
      {category && (
        <>
          <span class="mx-2">|</span>
          <a href={`/category/${category.toLowerCase()}`} class="text-blue-600 dark:text-blue-400 hover:underline">
            {category}
          </a>
        </>
      )}
    </div>
    
    {tags && tags.length > 0 && (
      <div class="flex flex-wrap gap-2">
        {tags.slice(0, 3).map((tag: string) => (
          <a 
            href={`/tag/${tag.toLowerCase()}`}
            class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs px-2 py-1 rounded hover:bg-blue-200 dark:hover:bg-blue-800"
          >
            {tag}
          </a>
        ))}
        {tags.length > 3 && (
          <span class="text-xs text-gray-500 dark:text-gray-400">+{tags.length - 3}</span>
        )}
      </div>
    )}
  </div>
</article> 