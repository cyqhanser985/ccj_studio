---

**项目规划文档：个人学习Studio网站**

**1. 项目概述 (Project Overview)**

*   **项目名称：** 个人学习Studio (Personal Learning Studio)
*   **项目愿景：** 构建一个精美、高效、个性化的数字空间，用于记录、组织和回顾个人学习历程中的知识点。网站将以LaTeX提供高质量的排版，特别是针对数学公式和学术笔记。
*   **核心价值：**
    *   **知识沉淀：** 将所学知识系统化、结构化，便于长期记忆和复习。
    *   **高效检索：** 快速找到需要的笔记和信息。
    *   **个性化体验：** 完全根据个人审美和使用习惯定制。
    *   **技术实践：** 探索和应用先进的前端技术。

**2. 项目目标 (Project Goals)**

*   **主要目标：**
    *   成功搭建一个支持 Markdown 和 LaTeX 混合编写内容的静态博客网站。
    *   实现清晰的文章分类、标签和搜索功能，方便知识管理。
    *   确保网站在桌面和移动设备上都有良好的阅读体验。
    *   建立一个流畅的内容创作和发布流程。
*   **次要目标 (可选，后期迭代)：**
    *   集成Mermaid.js等工具支持流程图、思维导图等可视化笔记。
    *   实现暗黑模式。
    *   优化加载速度和性能。
    *   支持PWA，允许离线访问（部分内容）。

**3. 目标用户 (Target User)**

*   **主要用户：** 你自己。
*   **用户需求：**
    *   能够方便地用 LaTeX 记录包含复杂公式的学习笔记。
    *   能够快速查找和回顾已记录的知识。
    *   网站界面美观，阅读舒适，符合个人审美。
    *   内容更新和维护过程简单直接。

**4. 项目范围 (Project Scope)**

*   **包含 (In Scope):**
    *   **MVP (Minimum Viable Product):**
        1.  静态网站生成 (SSG) 框架搭建。
        2.  Markdown 内容解析。
        3.  LaTeX 数学公式渲染 (行内和块级)。
        4.  基础博客功能：文章列表页、文章详情页。
        5.  简洁的导航栏和页脚。
        6.  本地内容编写，Git 推送，自动化部署。
        7.  一个基础、干净、可读性强的主题。
    *   **后续迭代：**
        1.  文章分类和标签系统。
        2.  客户端搜索功能 (如 Lunr.js, Fuse.js 或 Algolia DocSearch 的简单集成)。
        3.  代码块语法高亮。
        4.  响应式设计优化。
        5.  自定义主题和样式 (使用 Tailwind CSS)。
        6.  目录 (Table of Contents) 自动生成。
        7.  图片处理与优化 (懒加载、适当压缩)。
        8.  暗黑模式切换。
*   **不包含 (Out of Scope - 初期):**
    *   用户注册与登录系统。
    *   复杂的后端数据库。
    *   在线编辑器。
    *   多人协作功能。
    *   复杂的评论系统 (若需要，可集成 Giscus 等轻量级方案)。
    *   高级SEO优化 (基础的元信息即可)。

**5. 技术选型 (Technology Stack)**

*   **核心框架/SSG:** **Astro**
    *   *理由：* 专注内容型网站，性能卓越 (Islands Architecture, 默认0 JS)，Markdown/MDX 支持一流，易于集成各种UI框架组件 (如果需要)，社区活跃。
*   **LaTeX 渲染:** **KaTeX**
    *   *理由：* 速度快，渲染效果好，可通过 `rehype-katex` 或 Astro 的 Markdown 插件轻松集成。
*   **内容格式:** **Markdown (`.md`) / MDX (`.mdx`)**
    *   *理由：* 语法简洁，易于书写，MDX 允许在 Markdown 中嵌入 JSX 组件，扩展性强。
*   **样式方案:** **Tailwind CSS**
    *   *理由：* 原子化CSS，高度可定制，开发效率高，能快速构建精美界面而无需编写大量自定义CSS。Astro 对 Tailwind CSS 支持良好。
*   **版本控制:** **Git + GitHub** (或 GitLab/Gitee)
    *   *理由：* 行业标准，方便代码管理、版本回溯和与部署平台集成。
*   **部署平台 (无服务器):**
    *   **Vercel:** (尤其适合 Next.js, 但对 Astro 支持也很好)
    *   **Netlify:** (功能全面，对各种 SSG 支持良好)
    *   **Cloudflare Pages:** (速度快，全球CDN，免费额度慷慨)
    *   *选择其一即可，它们都提供免费套餐，并能与 GitHub 完美集成实现 CI/CD。*
*   **代码编辑器:** VS Code (推荐安装 Astro, Tailwind CSS IntelliSense, Prettier, ESLint 等插件)

**6. 内容策略与结构 (Content Strategy & Structure)**

*   **内容组织:**
    *   按学习主题/课程/领域进行大的分类。
    *   使用标签对文章进行更细致的标记。
    *   例如目录结构：
        ```
        src/
        └── content/
            ├── blog/  (或者叫 'posts', 'articles')
            │   ├── a-topic/
            │   │   ├── post1.mdx
            │   │   └── post2.md
            │   └── another-topic/
            │       └── interesting-concept.mdx
            └── notes/ (可选，用于更零散的笔记)
                └── quick-note.md
        ```
*   **Markdown Frontmatter:** 在每篇 `.md` 或 `.mdx` 文件头部使用 YAML Frontmatter 定义元数据：
    ```yaml
    ---
    title: "文章标题"
    date: "YYYY-MM-DD"
    description: "简短描述，用于列表页或Meta标签"
    tags: ["标签1", "标签2", "LaTeX"]
    category: "分类名称"
    draft: false # 是否为草稿，草稿不构建到生产环境
    # image: "/path/to/hero-image.jpg" # 可选，文章头图
    ---

    这里是 Markdown 和 LaTeX 内容...
    ```
*   **LaTeX 使用规范：**
    *   行内公式：`$ E = mc^2 $`
    *   块级公式：`$$ \int_a^b f(x) dx = F(b) - F(a) $$`
    *   确保 KaTeX 支持你常用的宏包和命令，或寻找替代方案。

**7. 设计与用户体验 (Design & UX - 个人化)**

*   **风格：** 简洁、学术、现代、专注于内容阅读。
*   **布局：** 单栏或双栏（内容区+侧边栏用于导航/TOC/相关文章）。
*   **排版：**
    *   选择清晰易读的衬线字体 (如 Georgia, Source Serif Pro) 或无衬线字体 (如 Inter, Lato, Open Sans) 用于正文。
    *   为代码和 LaTeX 公式选择合适的等宽字体 (如 Fira Code, JetBrains Mono)。
    *   保证足够的行间距和段间距。
    *   对比度适宜，避免眼睛疲劳。
*   **色彩：**
    *   选择一个你喜欢的主色调，搭配中性色。
    *   考虑暗黑模式的配色方案。
*   **导航：**
    *   清晰的主导航 (首页、分类/主题列表、标签云、关于等)。
    *   文章内部提供TOC。
    *   “上一篇/下一篇”导航。

**8. 部署方案 (Deployment Plan)**

1.  **本地开发：** 使用 Astro 提供的开发服务器 (`npm run dev`) 进行实时预览和调试。
2.  **代码托管：** 在 GitHub 上创建一个私有 (或公开) 仓库。
3.  **持续集成/持续部署 (CI/CD)：**
    *   选择一个托管平台 (Vercel, Netlify, Cloudflare Pages)。
    *   将平台与你的 GitHub 仓库连接。
    *   配置构建命令 (通常是 `npm run build` 或 `astro build`) 和输出目录 (通常是 `dist`)。
    *   之后，每次 `git push` 到主分支 (如 `main` 或 `master`)，平台会自动拉取代码、构建并部署网站。
4.  **自定义域名 (可选)：**
    *   购买域名 (如 Namecheap, GoDaddy, 阿里云)。
    *   在托管平台的设置中添加自定义域名，并按照指引修改域名的 DNS 解析记录。

**9. 项目阶段与时间规划 (Project Phases & Timeline - 仅供参考)**

*   **Phase 0: 准备与初始化 (1-3 天)**
    *   [ ] 学习 Astro 基础教程。
    *   [ ] 初始化 Astro 项目，配置 Git。
    *   [ ] 安装并配置 Tailwind CSS。
    *   [ ] 搭建基本的页面布局 (header, main, footer)。
*   **Phase 1: MVP - 核心功能实现 (1 周)**
    *   [ ] 实现 Markdown 内容渲染。
    *   [ ] 集成 KaTeX 并测试 LaTeX 公式显示。
    *   [ ] 创建文章列表页和文章详情页模板。
    *   [ ] 编写 2-3 篇示例文章 (包含 LaTeX)。
    *   [ ] 配置并完成首次部署到 Vercel/Netlify/Cloudflare Pages。
*   **Phase 2: 功能增强与样式打磨 (2-4 周, 可与内容填充并行)**
    *   [ ] 实现文章分类和标签功能，并创建相应列表页。
    *   [ ] 添加简单的客户端搜索功能。
    *   [ ] 实现代码块语法高亮。
    *   [ ] 完善响应式设计。
    *   [ ] 根据个人喜好调整主题颜色、字体等样式。
    *   [ ] 实现文章内部 TOC。
    *   [ ] (可选) 添加暗黑模式。
*   **Phase 3: 内容填充与持续迭代 (长期)**
    *   [ ] 持续撰写和迁移学习笔记。
    *   [ ] 根据使用体验，优化功能和设计。
    *   [ ] (可选) 探索集成 Mermaid.js 等高级功能。
    *   [ ] 定期更新依赖项。

**10. 维护与更新 (Maintenance & Updates)**

*   **内容更新：** 在本地编写 `.mdx` 文件，`git commit` & `git push` 即可自动更新网站。
*   **依赖更新：** 定期 (`npm outdated`, `npm update`) 更新项目依赖 (Astro, Tailwind, 插件等)，注意检查破坏性更新。
*   **备份：** Git 仓库本身就是一种备份。托管平台通常也有保障。
*   **功能迭代：** 根据新的需求或想法，持续改进网站。

**11. 成功标准 (Success Metrics - 个人)**

*   网站是否能够有效地帮助你记录和回顾知识？
*   你是否享受使用这个网站进行学习和创作的过程？
*   网站的视觉效果和交互体验是否符合你的期望？
*   你是否通过这个项目学到了新的前端技能？

---